import React, { useState, useEffect, useMemo } from 'react';
import { subjectsAPI } from '../api';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const EditableInfoBox = ({ label, value, onUpdate }) => ( <div className="bg-purple-900/50 rounded-lg p-3"><label className="text-gray-400 text-sm block">{label}</label><input type="number" value={value} onChange={onUpdate} className="font-bold text-white bg-transparent w-full focus:outline-none focus:bg-purple-800/50 rounded px-1 text-xl"/></div>);
const ProgressBar = ({ label, percentage, color, targetLabel }) => (<div><div className="flex justify-between items-center mb-1"><span className={`text-sm font-bold ${color === 'green' ? 'text-green-400' : 'text-red-400'}`}>{label}</span>{targetLabel && <span className="text-xs text-gray-400">{targetLabel}</span>}</div><div className="w-full bg-purple-900/50 rounded-full h-2"><div className={`h-2 rounded-full ${color === 'green' ? 'bg-green-500' : 'bg-red-500'}`} style={{ width: `${percentage}%` }}></div></div></div>);
const OverallAttendance = ({ subjects }) => { const stats = useMemo(() => { const totalConducted = subjects.reduce((sum, s) => sum + (s.conductedClasses || 0), 0); const totalAbsent = subjects.reduce((sum, s) => sum + (s.absentClasses || 0), 0); const totalPresent = totalConducted - totalAbsent; const overallPercentage = totalConducted > 0 ? (totalPresent / totalConducted) * 100 : 0; return { totalConducted, totalPresent, totalAbsent, overallPercentage }; }, [subjects]); const radius = 40; const circumference = 2 * Math.PI * radius; const offset = circumference - (stats.overallPercentage / 100) * circumference; return (<div className="bg-purple-800/60 rounded-xl p-4 flex items-center justify-between h-full"><div className="relative"><svg className="w-24 h-24 -rotate-90"><circle cx="50%" cy="50%" r={radius} stroke="#583d7a" strokeWidth="10" fill="transparent"/><circle cx="50%" cy="50%" r={radius} stroke="#f97316" strokeWidth="10" fill="transparent" strokeDasharray={circumference} strokeDashoffset={offset} strokeLinecap="round" style={{ transition: 'stroke-dashoffset 0.5s ease' }}/></svg><span className="absolute inset-0 flex items-center justify-center font-bold text-2xl">{stats.overallPercentage.toFixed(1)}%</span></div><div className="text-right"><h3 className="font-bold text-lg">Overall Attendance</h3><p className="text-sm text-gray-300">Total Classes: {stats.totalConducted}</p><p className="text-sm text-gray-300">Attended: {stats.totalPresent}</p><p className="text-sm text-gray-300">Absent: {stats.totalAbsent}</p></div></div>);};
const AtAGlance = ({ subjects }) => { const stats = useMemo(() => { const goodAttendanceCount = subjects.filter(s => { const p = s.conductedClasses > 0 ? ((s.conductedClasses - s.absentClasses) / s.conductedClasses) * 100 : 100; return p >= 80; }).length; const atRiskCount = subjects.length - goodAttendanceCount; return { goodAttendanceCount, atRiskCount }; }, [subjects]); return (<div className="bg-purple-800/60 rounded-xl p-4 space-y-3 flex flex-col justify-center h-full"><h3 className="font-bold text-lg">At a Glance</h3><div className="flex items-center text-green-400"><span className="text-2xl mr-3">‚úì</span> Subjects with Good Attendance: <b className="ml-auto text-xl">{stats.goodAttendanceCount}</b></div><div className="flex items-center text-red-400"><span className="text-2xl mr-3">‚úó</span> Subjects at Risk: <b className="ml-auto text-xl">{stats.atRiskCount}</b></div></div>);};
const AttendanceComparisonChart = ({ subjects }) => { const chartData = useMemo(() => { return subjects.map(s => { const percentage = s.conductedClasses > 0 ? ((s.conductedClasses - s.absentClasses) / s.conductedClasses) * 100 : 0; return { name: s.name, percentage: percentage < 0 ? 0 : percentage, }; }); }, [subjects]); return (<div className="bg-purple-800/60 rounded-xl p-4 flex flex-col h-full"><h3 className="font-bold text-lg text-center">Attendance Comparison</h3><div className="flex justify-around items-end w-full h-48 pt-4 px-2">{chartData.map(subject => (<div key={subject.name} className="flex flex-col items-center flex-grow h-full justify-end"><div className="text-white text-xs mb-1">{subject.percentage.toFixed(0)}%</div><div className="w-1/2 rounded-t-md transition-all duration-500" style={{ height: `${subject.percentage}%`, backgroundColor: subject.percentage >= 80 ? '#22c55e' : '#ef4444' }}></div><div className="text-xs text-gray-400 mt-2 truncate">{subject.name}</div></div>))}</div></div>);};
const SubjectCard = ({ subject, onUpdate, onDelete }) => { const { name, conductedClasses = 0, absentClasses = 0, totalPlannedClasses = 0, _id } = subject; const handleInputChange = (field, value) => { const numValue = parseInt(value, 10); if (!isNaN(numValue) && numValue >= 0) { onUpdate(_id, { [field]: numValue }); } }; const classesPresent = conductedClasses - absentClasses; const attendancePercentage = conductedClasses > 0 ? (classesPresent / conductedClasses) * 100 : 0; const isOnTrack = attendancePercentage >= 80; const maxSkippable = Math.floor(totalPlannedClasses * 0.2); const remainingSkippable = maxSkippable - absentClasses; return (<div className="bg-gradient-to-br from-purple-800/60 to-purple-900/80 rounded-2xl p-6 space-y-5 backdrop-blur-sm border border-purple-700/50 transition-all duration-300 hover:border-purple-500 hover:shadow-xl hover:shadow-purple-500/10"><div className="flex justify-between items-center"><h3 className="text-xl font-bold text-white">{name}</h3><button onClick={() => onDelete(_id)} className="text-gray-400 hover:text-red-500 transition-colors text-2xl">üóëÔ∏è</button></div><div className="space-y-3"><div className="grid grid-cols-2 gap-3"><EditableInfoBox label="Conducted" value={conductedClasses} onUpdate={(e) => handleInputChange('conductedClasses', e.target.value)} /><EditableInfoBox label="Absent" value={absentClasses} onUpdate={(e) => handleInputChange('absentClasses', e.target.value)} /><div className="bg-purple-900/50 rounded-lg p-3"><div className="text-gray-400 text-sm">Present</div><div className="font-bold text-white text-2xl">{classesPresent < 0 ? 0 : classesPresent}</div></div><div className="bg-purple-900/50 rounded-lg p-3"><div className="text-gray-400 text-sm">Attendance</div><div className="font-bold text-white text-2xl">{attendancePercentage < 0 ? 0 : attendancePercentage.toFixed(1)}%</div></div></div><ProgressBar label={isOnTrack ? 'On Track' : 'Below Requirement'} percentage={attendancePercentage} color={isOnTrack ? 'green' : 'red'} targetLabel="Target: 80%" /></div><div className="space-y-3"><h4 className="font-semibold text-gray-300">Semester Planning</h4><EditableInfoBox label="Total Planned Classes" value={totalPlannedClasses} onUpdate={(e) => handleInputChange('totalPlannedClasses', e.target.value)} /><div><div className="flex justify-between items-center mb-1 text-sm text-gray-300"><span>Remaining Skippable</span><span className="font-bold text-green-400">{remainingSkippable > 0 ? remainingSkippable : 0}</span></div><div className="w-full bg-purple-900/50 rounded-full h-2"><div className="bg-green-500 h-2 rounded-full" style={{ width: `${maxSkippable > 0 ? (remainingSkippable / maxSkippable) * 100 : 0}%` }}></div></div></div></div></div>);};

export default function AttendancePage({ onNavigate }) {
  const [subjects, setSubjects] = useState([]); const [newSubjectName, setNewSubjectName] = useState(""); const [newSubjectTotal, setNewSubjectTotal] = useState(""); const [error, setError] = useState(""); const [isLoaded, setIsLoaded] = useState(false);
  const fetchSubjects = async () => { try { const response = await subjectsAPI.getAll(); setSubjects(response.data); } catch (error) { console.error("Fetch error:", error); setError("Could not fetch subjects."); }};
  useEffect(() => { fetchSubjects().then(() => { setTimeout(() => setIsLoaded(true), 100); }); }, []);
  const handleAddSubject = async (e) => { e.preventDefault(); if (!newSubjectName) return; try { await subjectsAPI.create({ name: newSubjectName, totalPlannedClasses: newSubjectTotal || 0 }); setNewSubjectName(""); setNewSubjectTotal(""); await fetchSubjects(); } catch (error) { setError("Failed to add subject."); } };
  const handleDeleteSubject = async (id) => { if (window.confirm("Are you sure you want to delete this subject?")) { try { await subjectsAPI.delete(id); setSubjects(currentSubjects => currentSubjects.filter(s => s._id !== id)); } catch (error) { setError("Failed to delete subject."); } } };
  const handleUpdateSubject = async (id, updatedData) => { setSubjects(currentSubjects => currentSubjects.map(s => s._id === id ? { ...s, ...updatedData } : s)); try { await subjectsAPI.update(id, updatedData); } catch (error) { setError("Failed to save changes."); } };
  const handleExportCsv = () => { const headers = ["Subject", "Attendance %", "Status", "Conducted", "Present", "Absent", "Planned", "Max Skip", "Remain Skip"]; const rows = subjects.map(s => { const present = s.conductedClasses - s.absentClasses; const percentage = s.conductedClasses > 0 ? (present / s.conductedClasses) * 100 : 100; const status = percentage >= 80 ? "On Track" : "At Risk"; const maxSkip = Math.floor(s.totalPlannedClasses * 0.2); const remainSkip = maxSkip - s.absentClasses; return [s.name, percentage.toFixed(2), status, s.conductedClasses, present, s.absentClasses, s.totalPlannedClasses, maxSkip, remainSkip > 0 ? remainSkip : 0].join(','); }); const csvContent = [headers.join(','), ...rows].join('\n'); const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' }); const link = document.createElement("a"); const url = URL.createObjectURL(blob); link.setAttribute("href", url); link.setAttribute("download", "attendance_report.csv"); link.style.visibility = 'hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); };
  const handleExportPdf = () => { const doc = new jsPDF(); doc.text("Student Attendance Report", 14, 16); const tableColumn = ["Subject", "Att. %", "Status", "Conducted", "Present", "Absent", "Planned", "Max Skip", "Remain Skip"]; const tableRows = []; subjects.forEach(subject => { const present = subject.conductedClasses - subject.absentClasses; const percentage = subject.conductedClasses > 0 ? (present / subject.conductedClasses) * 100 : 100; const status = percentage >= 80 ? "On Track" : "At Risk"; const maxSkip = Math.floor(subject.totalPlannedClasses * 0.2); const remainSkip = maxSkip - subject.absentClasses; const rowData = [ subject.name, `${percentage.toFixed(1)}%`, status, subject.conductedClasses, present > 0 ? present : 0, subject.absentClasses, subject.totalPlannedClasses, maxSkip, remainSkip > 0 ? remainSkip : 0 ]; tableRows.push(rowData); }); autoTable(doc, { head: [tableColumn], body: tableRows, startY: 20, theme: 'striped', headStyles: { fillColor: [41, 128, 185] }, }); doc.save("attendance_report.pdf"); };
  
  return (
    <div className={`min-h-screen bg-gradient-to-br from-[#1a0c2e] via-[#0d0d24] to-[#1c0f2f] text-white p-4 sm:p-8 font-sans transition-opacity duration-700 ease-in-out ${isLoaded ? 'opacity-100' : 'opacity-0'}`}>
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-6">
            <button onClick={() => onNavigate('dashboard')} className="text-gray-300 hover:text-white transition-colors">&larr; Back to Dashboard</button>
            <div className="flex gap-4">
                <button onClick={handleExportCsv} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Export CSV</button>
                <button onClick={handleExportPdf} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Export PDF</button>
            </div>
        </div>
        <div className="text-center mb-10"><h1 className="text-4xl font-bold">Subject-wise Attendance Tracker</h1><p className="text-gray-400 mt-2">Update your attendance and see your progress in real-time</p></div>
        {subjects.length > 0 && (<div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10"><OverallAttendance subjects={subjects} /><AtAGlance subjects={subjects} /><AttendanceComparisonChart subjects={subjects} /></div>)}
        <div className="max-w-4xl mx-auto mb-10 bg-purple-900/50 rounded-xl p-4 border border-purple-700/50"><form onSubmit={handleAddSubject} className="flex flex-wrap items-center gap-4"><input type="text" placeholder="Subject Name" value={newSubjectName} onChange={e => setNewSubjectName(e.target.value)} className="flex-grow bg-transparent p-2 rounded focus:outline-none focus:bg-purple-800/50" required /><input type="number" placeholder="Total Planned Classes" value={newSubjectTotal} onChange={e => setNewSubjectTotal(e.target.value)} className="bg-transparent p-2 rounded focus:outline-none focus:bg-purple-800/50 w-40" required/><button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">+ Add Subject</button></form>{error && <p className="text-red-500 text-center mt-2">{error}</p>}</div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">{subjects.map((subject) => ( <SubjectCard key={subject._id} subject={subject} onUpdate={handleUpdateSubject} onDelete={handleDeleteSubject} /> ))}</div>
      </div>
    </div>
  );
}