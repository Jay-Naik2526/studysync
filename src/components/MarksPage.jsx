import React, { useState, useEffect, useMemo } from 'react';
import { subjectsAPI, gradesAPI, todosAPI } from '../api';

const SubjectPerformanceBarChart = ({ subjects, grades }) => { const data = useMemo(() => subjects.map(subject => { const subjectGrades = grades.filter(g => g.subject._id === subject._id); const totalScore = subjectGrades.reduce((acc, g) => acc + g.score, 0); const totalMax = subjectGrades.reduce((acc, g) => acc + g.maxScore, 0); return { name: subject.name, percentage: totalMax > 0 ? (totalScore / totalMax * 100) : 0 }; }), [subjects, grades]); return (<div className="bg-[#1c2135] p-3 rounded-lg h-full flex flex-col"><h3 className="font-bold mb-2">Subject Performance</h3><div className="flex justify-around items-end w-full flex-grow pt-4 px-2">{data.map(item => (<div key={item.name} className="flex flex-col items-center w-full h-full justify-end"><div className="w-3/5 bg-purple-500 rounded-t-md" style={{ height: `${item.percentage}%`, transition: 'height 0.5s ease' }}></div><div className="text-xs text-gray-400 mt-2 truncate w-full text-center">{item.name.substring(0,4)}</div></div>))}</div></div>);};
const TaskStatusPieChart = ({ todos }) => { const { completionPercentage } = useMemo(() => { const completed = todos.filter(t => t.completed).length; const completionPercentage = todos.length > 0 ? (completed / todos.length) * 100 : 0; return { completionPercentage }; }, [todos]); const radius = 60; const circumference = 2 * Math.PI * radius; const offset = circumference - (completionPercentage / 100) * circumference; return (<div className="bg-[#1c2135] p-3 rounded-lg h-full flex flex-col"><h3 className="font-bold mb-2">Task Status</h3><div className="flex-grow flex items-center justify-center relative"><svg className="w-40 h-40 -rotate-90"><circle cx="50%" cy="50%" r={radius} stroke="#ff9800" strokeWidth="20" fill="transparent"/><circle cx="50%" cy="50%" r={radius} stroke="#4caf50" strokeWidth="20" fill="transparent" strokeDasharray={circumference} strokeDashoffset={offset} style={{ transition: 'stroke-dashoffset 0.5s ease' }}/></svg><div className="absolute text-center"><p className="text-xs text-gray-400">Completed</p><p className="text-2xl font-bold">{completionPercentage.toFixed(0)}%</p></div></div></div>);};
const Sidebar = ({ subjects, grades, selectedSubject, onSelectSubject, onNavigate }) => (<aside className="bg-[#1c2135] text-white w-full md:w-64 p-4 space-y-6 flex-shrink-0"><div className="flex items-center space-x-2"><div className="bg-blue-600 p-2 rounded-lg">ðŸŽ“</div><h1 className="font-bold text-xl">Academic Hub</h1></div><button onClick={() => onNavigate('subjects')} className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200">+ New Subject</button><nav><a href="#" onClick={() => onSelectSubject('overview')} className={`flex items-center space-x-3 p-2 rounded-lg transition-colors duration-200 ${selectedSubject === 'overview' ? 'bg-blue-600/30' : 'hover:bg-gray-700/50'}`}><span>ðŸ“Š</span><span>Dashboard</span></a></nav><div><h3 className="text-gray-400 text-sm font-bold mb-2">SUBJECTS</h3><div className="space-y-1">{subjects.map(subject => { const subjectGrades = grades.filter(g => g.subject._id === subject._id); const totalScore = subjectGrades.reduce((acc, g) => acc + g.score, 0); const totalMax = subjectGrades.reduce((acc, g) => acc + g.maxScore, 0); const percentage = totalMax > 0 ? (totalScore / totalMax * 100) : 0; return (<a href="#" key={subject._id} onClick={() => onSelectSubject(subject.name)} className={`block p-2 rounded-lg transition-colors duration-200 ${selectedSubject === subject.name ? 'bg-blue-600/30' : 'hover:bg-gray-700/50'}`}><div className="flex justify-between text-sm"><span>{subject.name}</span><span>{percentage.toFixed(1)}%</span></div><div className="w-full bg-gray-600 rounded-full h-1 mt-1"><div className="bg-green-500 h-1 rounded-full" style={{ width: `${percentage}%` }}></div></div></a>);})}</div></div></aside>);
const ToDoList = ({ subject, todos, onAdd, onUpdate, onDelete }) => { const [newTodoText, setNewTodoText] = useState(""); const handleAdd = () => { if(newTodoText) { onAdd({ text: newTodoText, subject: subject._id }); setNewTodoText(""); }}; const completion = todos.length > 0 ? (todos.filter(t => t.completed).length / todos.length) * 100 : 0; return (<div className="bg-[#2a3047] p-4 rounded-lg"><h3 className="font-bold text-white mb-2">To-Do List</h3><div className="w-full bg-gray-600 rounded-full h-1.5 mb-4"><div className="bg-green-500 h-1.5 rounded-full" style={{ width: `${completion}%` }}></div></div><div className="flex gap-2 mb-4"><input type="text" placeholder="Add a new task..." value={newTodoText} onChange={e => setNewTodoText(e.target.value)} className="w-full bg-[#1c2135] rounded p-2 text-sm focus:outline-none"/><button onClick={handleAdd} className="bg-blue-600 rounded p-2 font-bold">+</button></div><div className="space-y-2 max-h-48 overflow-y-auto">{todos.map(todo => (<div key={todo._id} className="flex items-center gap-3 text-sm bg-[#1c2135] p-2 rounded"><input type="checkbox" checked={todo.completed} onChange={() => onUpdate(todo._id, { completed: !todo.completed })} className="form-checkbox bg-[#2a3047] border-gray-500 rounded text-blue-500 focus:ring-0"/><p className={`flex-grow ${todo.completed ? 'line-through text-gray-400' : ''}`}>{todo.text}</p><button onClick={() => onDelete(todo._id)} className="text-red-500 font-bold">x</button></div>))}</div></div>);};
const MarksBreakdown = ({ subject, grades, onAdd, onUpdate, onDelete }) => { const [newAssignmentName, setNewAssignmentName] = useState(""); const [newAssignmentMax, setNewAssignmentMax] = useState(20); const handleQuickAdd = type => { let gradeData = { subject: subject._id, score: 0 }; if (type === 'midterm1') gradeData = { ...gradeData, title: 'Midterm 1', examType: 'midterm', maxScore: 10 }; else if (type === 'midterm2') gradeData = { ...gradeData, title: 'Midterm 2', examType: 'midterm', maxScore: 10 }; else if (type === 'termend') gradeData = { ...gradeData, title: 'Term End Exam', examType: 'final', maxScore: 100 }; onAdd(gradeData); }; const handleAddAssignment = () => { if (!newAssignmentName) return; onAdd({ title: newAssignmentName, examType: 'assignment', score: 0, maxScore: newAssignmentMax, subject: subject._id }); setNewAssignmentName(""); setNewAssignmentMax(20); }; const midterms = grades.filter(g => g.examType === 'midterm').sort((a,b) => a.title.localeCompare(b.title)); const termEnd = grades.find(g => g.examType === 'final'); const assignments = grades.filter(g => g.examType === 'assignment'); const hasMidterm1 = midterms.some(m => m.title === 'Midterm 1'); const hasMidterm2 = midterms.some(m => m.title === 'Midterm 2'); return (<div className="bg-[#2a3047] p-4 rounded-lg space-y-4"><h3 className="font-bold text-white">Marks Breakdown</h3><div><h4 className="font-semibold mb-2 text-gray-300">Midterms</h4>{midterms.map(grade => (<div key={grade._id} className="bg-[#1c2135] p-2 rounded flex items-center gap-2 mb-2"><span className="flex-grow text-sm">{grade.title}</span><input type="number" value={grade.score} onChange={(e) => onUpdate(grade._id, { score: parseInt(e.target.value) || 0 })} className="w-16 bg-transparent text-white font-bold focus:outline-none text-right" /><span className="text-gray-400">/ {grade.maxScore}</span><button onClick={() => onDelete(grade._id)} className="text-red-500 font-bold">x</button></div>))}{!hasMidterm1 && <button onClick={() => handleQuickAdd('midterm1')} className="w-full text-sm bg-blue-600/50 hover:bg-blue-600/80 p-2 rounded-lg">+ Add Midterm 1</button>}{hasMidterm1 && !hasMidterm2 && <button onClick={() => handleQuickAdd('midterm2')} className="w-full text-sm bg-blue-600/50 hover:bg-blue-600/80 p-2 rounded-lg">+ Add Midterm 2</button>}</div><div><h4 className="font-semibold mb-2 text-gray-300">Term End Exam</h4>{termEnd ? (<div className="bg-[#1c2135] p-2 rounded flex items-center gap-2"><span className="flex-grow text-sm">{termEnd.title}</span><input type="number" value={termEnd.score} onChange={(e) => onUpdate(termEnd._id, { score: parseInt(e.target.value) || 0 })} className="w-16 bg-transparent text-white font-bold focus:outline-none text-right" /><span className="text-gray-400">/ {termEnd.maxScore}</span><button onClick={() => onDelete(termEnd._id)} className="text-red-500 font-bold">x</button></div>) : (<button onClick={() => handleQuickAdd('termend')} className="w-full text-sm bg-blue-600/50 hover:bg-blue-600/80 p-2 rounded-lg">+ Add Term End Exam</button>)}</div><div><h4 className="font-semibold mb-2 text-gray-300">Assignments</h4>{assignments.map(grade => (<div key={grade._id} className="bg-[#1c2135] p-2 rounded flex items-center gap-2 mb-2"><span className="flex-grow text-sm">{grade.title}</span><input type="number" value={grade.score} onChange={(e) => onUpdate(grade._id, { score: parseInt(e.target.value) || 0 })} className="w-16 bg-transparent text-white font-bold focus:outline-none text-right" /><span className="text-gray-400">/ {grade.maxScore}</span><button onClick={() => onDelete(grade._id)} className="text-red-500 font-bold">x</button></div>))}<div className="flex gap-2"><input type="text" placeholder="Add new assignment..." value={newAssignmentName} onChange={e => setNewAssignmentName(e.target.value)} className="w-full bg-[#1c2135] rounded p-2 text-sm focus:outline-none"/><input type="number" placeholder="Max" value={newAssignmentMax} onChange={e => setNewAssignmentMax(parseInt(e.target.value) || 0)} className="w-20 bg-[#1c2135] rounded p-2 text-sm focus:outline-none"/><button onClick={handleAddAssignment} className="bg-blue-600 rounded p-2 text-sm font-bold">+</button></div></div></div>);};
const GoalCalculator = ({ subject, grades }) => { const [targetPercent, setTargetPercent] = useState(90); const calculation = useMemo(() => { const overallTotalMarks = subject.totalMarks; const currentScore = grades.reduce((sum, g) => sum + g.score, 0); const marksAccountedFor = grades.reduce((sum, g) => sum + g.maxScore, 0); if (marksAccountedFor >= overallTotalMarks) return { message: "All marks have been entered." }; const requiredTotalScore = (targetPercent / 100) * overallTotalMarks; const marksNeeded = requiredTotalScore - currentScore; const remainingMarksAvailable = overallTotalMarks - marksAccountedFor; if (marksNeeded <= 0) return { message: `You've already achieved your ${targetPercent}% goal!` }; if (marksNeeded > remainingMarksAvailable) return { message: `It's impossible to reach ${targetPercent}%. You need ${marksNeeded.toFixed(1)} more marks, but only ${remainingMarksAvailable} are left.` }; const requiredPercentageOnRemaining = (marksNeeded / remainingMarksAvailable) * 100; return { message: `To get ${targetPercent}%, you need to score an average of`, requiredPercentage: `${requiredPercentageOnRemaining.toFixed(1)}%`, details: `(${marksNeeded.toFixed(1)} out of the remaining ${remainingMarksAvailable} marks)` }; }, [targetPercent, subject, grades]); return (<div className="bg-[#1c2135] rounded-lg p-4 h-full flex flex-col justify-between"><div><h3 className="font-bold text-white mb-2">"What If?" Goal Calculator</h3><div className="flex items-center gap-2 mb-4"><label htmlFor="target" className="text-sm text-gray-300">I want to get</label><input id="target" type="number" value={targetPercent} onChange={e => setTargetPercent(parseInt(e.target.value) || 0)} className="w-20 bg-[#2a3047] rounded p-2 text-white font-bold text-center focus:outline-none"/><span className="text-lg font-bold">%</span></div></div><div className="text-center bg-gray-800 p-4 rounded-lg"><p className="text-gray-300 text-sm">{calculation.message}</p>{calculation.requiredPercentage && (<p className="text-3xl font-bold text-green-400 my-1">{calculation.requiredPercentage}</p>)}{calculation.details && (<p className="text-gray-400 text-xs">{calculation.details}</p>)}</div></div>);};
const SubjectDetailView = ({ subject, grades, todos, handlers }) => { const totalScore = grades.reduce((acc, g) => acc + g.score, 0); const totalMax = grades.reduce((acc, g) => acc + g.maxScore, 0); const percentage = totalMax > 0 ? (totalScore / totalMax * 100) : 0; return (<div className="space-y-6"><div className="bg-[#2a3047] p-4 rounded-lg"><div className="flex justify-between items-center mb-4"><div><h2 className="text-2xl font-bold text-white">{subject.name}</h2><p className="text-sm text-gray-400">Marks: {totalScore} / {totalMax} <span className="ml-2">Percentage: {percentage.toFixed(1)}%</span></p></div><span className={`text-xs font-bold px-3 py-1 rounded-full ${percentage >= 80 ? 'bg-green-600/50 text-green-300' : 'bg-yellow-600/50 text-yellow-300'}`}>{percentage >= 80 ? 'Excellent' : 'Good'}</span></div><div className="h-48"><GoalCalculator subject={subject} grades={grades} /></div></div><div className="grid grid-cols-1 lg:grid-cols-2 gap-6"><MarksBreakdown subject={subject} grades={grades} onAdd={handlers.addGrade} onUpdate={handlers.updateGrade} onDelete={handlers.deleteGrade} /><ToDoList subject={subject} todos={todos} onAdd={handlers.addTodo} onUpdate={handlers.updateTodo} onDelete={handlers.deleteTodo} /></div></div>);};
const AcademicOverview = ({ subjects, grades, todos }) => { const stats = useMemo(() => { const totalScore = grades.reduce((acc, g) => acc + g.score, 0); const totalMax = grades.reduce((acc, g) => acc + g.maxScore, 0); const overallScore = totalMax > 0 ? (totalScore / totalMax * 100) : 0; const completedTasks = todos.filter(t => t.completed).length; const pendingTasks = todos.length - completedTasks; return { overallScore, completedTasks, pendingTasks }; }, [grades, todos]); return (<div className="bg-[#2a3047] p-4 rounded-lg"><h2 className="text-2xl font-bold text-white mb-4">Academic Overview</h2><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6"><div className="bg-blue-600/80 p-3 rounded-lg text-white transition-transform duration-200 hover:scale-105"><p>Overall Score</p><p className="text-2xl font-bold">{stats.overallScore.toFixed(1)}%</p></div><div className="bg-purple-600/80 p-3 rounded-lg text-white transition-transform duration-200 hover:scale-105"><p>Total Subjects</p><p className="text-2xl font-bold">{subjects.length}</p></div><div className="bg-green-600/80 p-3 rounded-lg text-white transition-transform duration-200 hover:scale-105"><p>Completed Tasks</p><p className="text-2xl font-bold">{stats.completedTasks}</p></div><div className="bg-orange-600/80 p-3 rounded-lg text-white transition-transform duration-200 hover:scale-105"><p>Pending Tasks</p><p className="text-2xl font-bold">{stats.pendingTasks}</p></div></div><div className="grid grid-cols-1 lg:grid-cols-2 gap-6" style={{ minHeight: '250px' }}><SubjectPerformanceBarChart subjects={subjects} grades={grades} /><TaskStatusPieChart todos={todos} /></div></div>);};

export default function MarksPage({ onNavigate }) {
  const [subjects, setSubjects] = useState([]); const [grades, setGrades] = useState([]); const [todos, setTodos] = useState([]); const [selectedSubject, setSelectedSubject] = useState('overview'); const [isLoading, setIsLoading] = useState(true); const [isLoaded, setIsLoaded] = useState(false);
  const fetchData = async () => { try { setIsLoading(true); const [subjectsRes, gradesRes, todosRes] = await Promise.all([subjectsAPI.getAll(), gradesAPI.getAll(), todosAPI.getAll()]); setSubjects(subjectsRes.data); setGrades(gradesRes.data); setTodos(todosRes.data); } catch (error) { console.error("Failed to fetch data", error); } finally { setIsLoading(false); } };
  useEffect(() => { fetchData().then(() => setTimeout(() => setIsLoaded(true), 100)) }, []);
  const gradeHandlers = { addGrade: async (gradeData) => { try { await gradesAPI.create(gradeData); await fetchData(); } catch (e) { console.error(e); } }, updateGrade: async (id, updateData) => { setGrades(grades.map(g => g._id === id ? { ...g, ...updateData } : g)); try { await gradesAPI.update(id, updateData); } catch (e) { console.error(e); await fetchData(); }}, deleteGrade: async (id) => { try { await gradesAPI.delete(id); setGrades(grades.filter(g => g._id !== id)); } catch (e) { console.error(e); } }, };
  const todoHandlers = { addTodo: async (todoData) => { try { await todosAPI.create(todoData); await fetchData(); } catch (e) { console.error(e); }}, updateTodo: async (id, updateData) => { try { await todosAPI.update(id, updateData); await fetchData(); } catch(e) { console.error(e); }}, deleteTodo: async (id) => { try { await todosAPI.delete(id); setTodos(todos.filter(t => t._id !== id)); } catch (e) { console.error(e); }}, };
  const { currentSubjectData, currentGrades, currentTodos } = useMemo(() => { const subject = subjects.find(s => s.name === selectedSubject); const filteredGrades = subject ? grades.filter(g => g.subject._id === subject._id) : []; const filteredTodos = subject ? todos.filter(t => t.subject === subject._id) : []; return { currentSubjectData: subject, currentGrades: filteredGrades, currentTodos: filteredTodos }; }, [selectedSubject, subjects, grades, todos]);
  if (isLoading) return <div className="min-h-screen bg-[#1c2135] text-white flex items-center justify-center">Loading Academic Hub...</div>
  return (<div className={`min-h-screen bg-[#1c2135] flex flex-col md:flex-row font-sans transition-opacity duration-500 ${isLoaded ? 'opacity-100' : 'opacity-0'}`}><Sidebar subjects={subjects} grades={grades} selectedSubject={selectedSubject} onSelectSubject={setSelectedSubject} onNavigate={onNavigate} /><main className="flex-grow p-6 bg-[#21273d] text-white overflow-auto"><button onClick={() => onNavigate('dashboard')} className="mb-6 text-gray-300 hover:text-white transition-colors text-sm">&larr; Back to Main Dashboard</button>{selectedSubject === 'overview' ? <AcademicOverview subjects={subjects} grades={grades} todos={todos} /> : (currentSubjectData && <SubjectDetailView subject={currentSubjectData} grades={currentGrades} todos={currentTodos} handlers={{...gradeHandlers, ...todoHandlers}} />)}</main></div>);
}